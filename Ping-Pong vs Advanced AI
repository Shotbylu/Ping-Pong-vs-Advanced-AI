import pygame
import sys
import random
import math

# Initialize Pygame
pygame.init()

# Set up the game window
WIDTH = 800
HEIGHT = 600
window = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Ping Pong vs Advanced AI By Lungelo Sbisi")

# Define colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)

# Define game objects
PADDLE_WIDTH = 10
PADDLE_HEIGHT = 100
BALL_SIZE = 10
BALL_SPEED = 7
PADDLE_SPEED = 10
AI_SPEED = 9

# Initialize game objects
left_paddle = pygame.Rect(50, HEIGHT//2 - PADDLE_HEIGHT//2, PADDLE_WIDTH, PADDLE_HEIGHT)
right_paddle = pygame.Rect(WIDTH - 50 - PADDLE_WIDTH, HEIGHT//2 - PADDLE_HEIGHT//2, PADDLE_WIDTH, PADDLE_HEIGHT)
ball = pygame.Rect(WIDTH//2 - BALL_SIZE//2, HEIGHT//2 - BALL_SIZE//2, BALL_SIZE, BALL_SIZE)

# Initialize ball direction
ball_dx = BALL_SPEED * random.choice((1, -1))
ball_dy = BALL_SPEED * random.choice((1, -1))

# Initialize scores
left_score = 0
right_score = 0

# Initialize font
font = pygame.font.Font(None, 36)

# Game mode
SINGLE_PLAYER = "single"
TWO_PLAYER = "two"
game_mode = None

# AI variables
ai_target_y = HEIGHT // 2
AI_PREDICTION_FRAMES = 120

def reset_ball():
    """Reset the ball to the center of the screen with a random direction."""
    ball.center = (WIDTH//2, HEIGHT//2)
    global ball_dx, ball_dy
    ball_dx = BALL_SPEED * random.choice((1, -1))
    ball_dy = BALL_SPEED * random.choice((1, -1))

def show_welcome_screen():
    """Display the welcome screen with game title and instructions."""
    window.fill(BLACK)
    title = font.render("Ping Pong vs Advanced AI", True, WHITE)
    instructions1 = font.render("Press 1 for Single Player (vs AI)", True, WHITE)
    instructions2 = font.render("Press 2 for Two Players", True, WHITE)
    controls = font.render("Controls: W/S (Left), Up/Down Arrows (Right)", True, WHITE)
    warning = font.render("Warning: AI is extremely challenging!", True, RED)
    
    window.blit(title, (WIDTH//2 - title.get_width()//2, HEIGHT//4))
    window.blit(instructions1, (WIDTH//2 - instructions1.get_width()//2, HEIGHT//2 - 40))
    window.blit(instructions2, (WIDTH//2 - instructions2.get_width()//2, HEIGHT//2 + 10))
    window.blit(controls, (WIDTH//2 - controls.get_width()//2, HEIGHT*3//4 - 40))
    window.blit(warning, (WIDTH//2 - warning.get_width()//2, HEIGHT*3//4 + 10))
    
    pygame.display.flip()
    
    waiting = True
    global game_mode
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_1:
                    game_mode = SINGLE_PLAYER
                    waiting = False
                elif event.key == pygame.K_2:
                    game_mode = TWO_PLAYER
                    waiting = False

def handle_events():
    """Handle game events, including quitting and paddle movement."""
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
    
    keys = pygame.key.get_pressed()
    if keys[pygame.K_w] and left_paddle.top > 0:
        left_paddle.y -= PADDLE_SPEED
    if keys[pygame.K_s] and left_paddle.bottom < HEIGHT:
        left_paddle.y += PADDLE_SPEED
    
    if game_mode == TWO_PLAYER:
        if keys[pygame.K_UP] and right_paddle.top > 0:
            right_paddle.y -= PADDLE_SPEED
        if keys[pygame.K_DOWN] and right_paddle.bottom < HEIGHT:
            right_paddle.y += PADDLE_SPEED

def predict_ball_position(frames_ahead):
    """Predict the ball's position after a certain number of frames."""
    future_x = ball.centerx
    future_y = ball.centery
    dx, dy = ball_dx, ball_dy
    
    for _ in range(frames_ahead):
        future_x += dx
        future_y += dy
        
        if future_y <= 0 or future_y >= HEIGHT:
            dy *= -1
        
        if future_x <= left_paddle.right or future_x >= right_paddle.left:
            break
    
    return future_x, future_y

def calculate_interception_point(predicted_x, predicted_y):
    """Calculate the optimal interception point for the AI paddle."""
    if predicted_x > WIDTH // 2:
        # Ball is moving towards AI
        return min(max(predicted_y, PADDLE_HEIGHT // 2), HEIGHT - PADDLE_HEIGHT // 2)
    else:
        # Ball is moving away from AI, return to center
        return HEIGHT // 2

def apply_strategic_offset(interception_y):
    """Apply a strategic offset to the interception point."""
    if ball.centery < HEIGHT // 3:
        # Ball is in upper third, aim for lower part of the ball
        return interception_y + BALL_SIZE
    elif ball.centery > 2 * HEIGHT // 3:
        # Ball is in lower third, aim for upper part of the ball
        return interception_y - BALL_SIZE
    else:
        # Ball is in middle, aim for center
        return interception_y

def update_ai():
    """Update the AI-controlled paddle position."""
    global ai_target_y
    
    if game_mode == SINGLE_PLAYER:
        predicted_x, predicted_y = predict_ball_position(AI_PREDICTION_FRAMES)
        interception_y = calculate_interception_point(predicted_x, predicted_y)
        ai_target_y = apply_strategic_offset(interception_y)
        
        # Move paddle towards target with perfect accuracy
        if right_paddle.centery < ai_target_y:
            right_paddle.y += min(AI_SPEED, ai_target_y - right_paddle.centery)
        elif right_paddle.centery > ai_target_y:
            right_paddle.y -= min(AI_SPEED, right_paddle.centery - ai_target_y)
        
        # Ensure paddle stays within screen bounds
        right_paddle.y = max(0, min(right_paddle.y, HEIGHT - PADDLE_HEIGHT))

def update_game_state():
    """Update the game state, including ball movement and scoring."""
    global ball_dx, ball_dy, left_score, right_score
    
    # Move the ball
    ball.x += ball_dx
    ball.y += ball_dy
    
    # Ball collision with top and bottom
    if ball.top <= 0 or ball.bottom >= HEIGHT:
        ball_dy *= -1
    
    # Ball collision with paddles
    if ball.colliderect(left_paddle) or ball.colliderect(right_paddle):
        ball_dx *= -1
        # Add a slight vertical angle change on paddle hit
        ball_dy += random.uniform(-1, 1)
        ball_dy = max(min(ball_dy, BALL_SPEED), -BALL_SPEED)  # Cap vertical speed
    
    # Scoring
    if ball.left <= 0:
        right_score += 1
        reset_ball()
    elif ball.right >= WIDTH:
        left_score += 1
        reset_ball()

def render():
    """Render the game objects and scores."""
    window.fill(BLACK)
    pygame.draw.rect(window, WHITE, left_paddle)
    pygame.draw.rect(window, WHITE, right_paddle)
    pygame.draw.ellipse(window, WHITE, ball)
    
    # Draw center line
    pygame.draw.aaline(window, WHITE, (WIDTH//2, 0), (WIDTH//2, HEIGHT))
    
    # Render scores
    left_score_text = font.render(str(left_score), True, WHITE)
    right_score_text = font.render(str(right_score), True, WHITE)
    window.blit(left_score_text, (WIDTH//4, 20))
    window.blit(right_score_text, (3*WIDTH//4 - right_score_text.get_width(), 20))
    
    # Render game mode
    mode_text = font.render("Single Player (vs AI)" if game_mode == SINGLE_PLAYER else "Two Players", True, WHITE)
    window.blit(mode_text, (WIDTH//2 - mode_text.get_width()//2, 20))
    
    pygame.display.flip()

def main():
    """Main game loop."""
    clock = pygame.time.Clock()
    
    show_welcome_screen()
    
    while True:
        handle_events()
        update_ai()
        update_game_state()
        render()
        clock.tick(60)  # 60 FPS

if __name__ == "__main__":
    main()
